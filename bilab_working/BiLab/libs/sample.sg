{ 
  let p:protein = read("molecules/1GP2A.genpept", "GenPept");
  let p2:molecule = read("molecules/1GP2.pdb");
  let p4:protein = read("sequences/GI133219.genpept", "GenPept");
  let p5:protein = read("sequences/GI3914197Dingo.genpept", "GenPept");
  let p6:molecule = read("molecules/HewLysozyme.pdb");
  let d:DNA = read("molecules/rnops.embl");
  let d2:DNA = read("molecules/AF084455.embl");
  let d4:DNA = read("sequences/InfluenzaA.gb");
  let d5:DNA = read("sequences/CX832255.gb");
  let mg:DNA = read("sequences/NC_000908.fna");

  let cxcrseqs = (read("sequences/CXCR4_HOMO.gb"), read("sequences/CXCR3_MOUSE.gb"),
                  read("sequences/CXCR1_RAT.gb"), read("sequences/BLR1_HUMAN.gb") );
                  
  // pre-computed alignment of the seqs above
  let cxcraln:alignment = read("sequences/cxcr_multi_seq.msf");
  
  let cxr1:protein = cxcrseqs(1).transcription.translation;
  let cxr2:protein = cxcrseqs(2).transcription.translation;
  let cxrl = (cxr1,cxr2);
  
  let gilist = ("14198244","23612083","2804157","15084307");
  // pre-load these elements in-case there is no network
  let gi0:DNA = read("sequences/gi0.gb"); 
  let gi1:DNA = read("sequences/gi1.gb"); 
  let gi2:DNA = read("sequences/gi2.gb"); 
  let gi3:DNA = read("sequences/gi3.gb"); 

  // also, preassign the variables from the quickstart
  let d3 = gi3;
  let r3 = transcribe(d3);
  let p3 = translate(d3);
  let slist = (p, translate(d2), p3 );
  
  // NB: currently pictures require the UI to be up before they can load - so can't do
  //  it here until concurrency implemented
  //let pic:picture = read("pictures/Rat_retinaganglion.jpg");
  
  

  let Complex = func(N:type=real->type) {
    let Complex = class {
    
      func(->self) {};
      func(c:self ->self) { r=c.r; i=c.i };
      func(r:N, i:N ->self) { ~r=r; ~i=i; };
      func(r:N ->self) { ~r=r; i=0; };
      
      // an indexer (index 0 is r, index 1 is i)
      operator():N property(index:int) {
        get = pre {index>=0 and index<=1}; {if(index==0) r else i};
        set = pre {index>=0 and index<=1}; {if(index==0) r=value else i=value}
      };
      
      // explicit conversion to vector
      static operator-> = func(c:self -> vector) {[c.r c.i]};
      
      static operator+ = func(c1:self, c2:self -> self) { self(c1.r+c2.r, c1.i+c2.i) };
      static operator- = func(c1:self, c2:self -> self) { self(c1.r-c2.r, c1.i-c2.i) };
      static operator+ = func(c:self -> self) { self(c) }; // unary +
      static operator- = func(c:self -> self) { self(-c.r,-c.i); }; // unary -
  
      static operator* = func(c1:self, c2:self -> self) { self(c1.r*c2.r-c1.i*c2.i, c1.r*c2.i+c1.i*c2.r) };
      
      static operator|| = func(c:self -> N) { N((c.r^2 + c.i^2)^0.5) };  // complex norm
      
      static operator== = func(c1:self, c2:self -> bool) { (c1.r==c2.r) and (c1.i==c2.i) };
      static operator!= = func(c1:self, c2:self -> bool) { !(c1==c2) };
      
      conjugate:self property {
        get = {self(r,-i)}
      };
      
      override toString = func(->string) { ""+r+(if(i>=0)"+"else"")+(if(|i|!=1)""+i else(if(i==-1)"-"else""))+"i" };
      
      r:N = 0;
      i:N = 0;
    };
    Complex
  };
  
  let complex = Complex();

};
