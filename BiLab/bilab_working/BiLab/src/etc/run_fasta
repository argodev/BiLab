#!/bin/sh -

# this script will run a search program on a sequence input file or on each
# file in a file of filenames

# to customise this script see the function called run_one_prog below


RCS_HEADER="$Header: //tmp/pathsoft/artemis/etc/run_fasta,v 1.18 2008-05-16 10:15:49 tjc Exp $"

PROG=`echo $RCS_HEADER | sed 's/.*run_\(.*\),v.*/\1/'`


if [ $# = 4 -a x$1 = x-onefile ]
then
    shift
    ONEFILE=t
    DATABASE=$3 export DATABASE
else
    if [ $# = 2 ]
    then
        DATABASE=$2 export DATABASE
    else
        echo usage: $0 -onefile input_file output_file database 1>&2
        echo    or: $0 file_of_filenames database 1>&2
        exit 1
    fi
fi

#
# Exchange DB name for fasta reference
#
if [ -f "$FASTLIBS" ]; then
  if [ "$DATABASE" = "%uniprot" ]; then
    DATABASE="%U";
  elif [ "$DATABASE" = "%uniprot_archaea" ]; then
    DATABASE="%A";
  elif [ "$DATABASE" = "%uniprot_bacteria" ]; then
    DATABASE="%B";
  elif [ "$DATABASE" = "%uniprot_eukaryota" ]; then
    DATABASE="%E";
  elif [ "$DATABASE" = "%uniprot_viruses" ]; then
    DATABASE="%V";
  elif [ "$DATABASE" = "%uniprot_rest" ]; then
    DATABASE="%R";
  elif [ "$DATABASE" = "%malaria" ]; then
    DATABASE="%M";
  elif [ "$DATABASE" = "%kineto_aa" ]; then
    DATABASE="%K";
  fi
fi

# expand any ~ or environment variables
#EXPANDED_DATABASE=`echo "echo $DATABASE" | /bin/csh -f`
eval EXPANDED_DATABASE="$DATABASE"

### change this function to suit your site:

run_one_prog () {
    INPUT_FILE=$1
    OUTPUT_FILE=$2
    DATABASE=$3


    ### change these lines:
    EXEC=${EXEC-`which fasta34 2>/dev/null`}

    if [ ! -x "$EXEC" ]; then
      EXEC=`find Artemis* -name fasta34 2>/dev/null`
    fi
 
    if [ ! -f "$FASTLIBS" ]; then
      DATABASE_TMP=`echo $DATABASE | sed 's|\%||'`
      DATABASE_TMP="$PWD/"`find Artemis* -name blast-data 2>/dev/null`"/$DATABASE_TMP"
      if [ -f "$DATABASE_TMP" ]; then
        DATABASE="$DATABASE_TMP"
      fi
    fi
   
    echo "about to start $EXEC with input from $INPUT_FILE and output to" 1>&2
    echo "$OUTPUT_FILE using database $DATABASE" 1>&2

    # add/change the flags to suit your site:
    COMMAND="$EXEC -B -S -q -b 40 -H $INPUT_FILE $DATABASE ktup 2"

    echo "command line: $COMMAND" 1>&2

    nice -19 $COMMAND 2>&1 > $OUTPUT_FILE | 
      tee ${PROG}_errors.new 1>&2

    #### end of changes


    # Artemis can read compressed files
    gzip -9 $OUTPUT_FILE &

    if [ -s ${PROG}_errors.new ]
    then
        ( echo ERROR running $PROG: ; echo; 
          echo ===================================================
          cat ${PROG}_errors.new ) >> $OUTPUT_FILE
        cat ${PROG}_errors.new >> ${PROG}_errors
    fi
}

(echo "#!/bin/sh -"; echo "kill $$") > $PROG.kill

chmod a+x $PROG.kill

if [ x$ONEFILE = x ]
then
    for i in `cat $1`
    do
        run_one_prog $i $i.out $EXPANDED_DATABASE
    done

else
    run_one_prog $1 $2 $EXPANDED_DATABASE
fi

exit 0
